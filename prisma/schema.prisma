// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id    String  @id @default(uuid())
  email String  @unique
  name  String?

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  workingHistory WorkingHistory[]

  @@map("users")
}

model Technology {
  id String @id @default(uuid())

  name String @unique

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  technologyProject        TechnologyProject[]
  workingHistoryTechnology WorkingHistoryTechnology[]

  @@map("technology")
}

model Project {
  id String @id @default(uuid())

  title       String
  description String
  startDate   DateTime?
  endDate     DateTime?
  duration    Int

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  technologyProject TechnologyProject[]
  workingHistory    WorkingHistory[]

  @@map("project")
}

model WorkingHistory {
  id String @id @default(uuid())

  role             String
  responsibilities String? @db.Text

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  userId    String
  user      Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  workingHistoryTechnology WorkingHistoryTechnology[]

  @@map("working_history")
}

model TechnologyProject {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  technologyId String
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String

  @@unique([technologyId, projectId])
  @@map("technology-project")
}

model WorkingHistoryTechnology {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  technologyId     String
  technology       Technology     @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  workingHistoryId String
  workingHistory   WorkingHistory @relation(fields: [workingHistoryId], references: [id], onDelete: Cascade)

  @@unique([technologyId, workingHistoryId])
  @@map("working_history-technology")
}
